
(defvar time_rev false)
(defvar temp "...")
(defvar weather "waiting...")
(defvar weatherImage "/home/a/.config/eww/icons/loading.gif")
(defvar windSpeed "waiting...")
(defvar windGusts "waiting...")

(defwidget greeter [? text name]
	(box :orientation "horizontal"
             :halign "center"
           text 
           (button :onclick "notify-send 'Hello' 'Hello, ${name}'")))

(defpoll time :interval "10s"
   	      :initial "time"
      	      :halign "start"
	      `date "+%F %H:%M"`)

(defpoll cputemp :interval "5s"
    :initial "temp"
    "~/.bin/cputemp.sh")

(defvar foo "initial value")
(defvar out false)
(defvar soundIcon "墳")
(defvar soundReveal false)

(defpoll sound :initial "sound" :interval "5s" "~/.config/eww/scripts/volume")

; (box :space-evenly "false"  (revealer :reveal out :transition "slideleft" time))

(deflisten workspaces :initial "\"empty\""
    "~/.config/eww/scripts/workspaces.sh \"\"")

(deflisten windowName :initial "empty"
    "~/.config/eww/scripts/name.sh"
    )

(defwidget leftside []
    (box :class "island workspaces" :orientation "horizontal" :halign "start"
         (literal :content workspaces)))

(defwidget displayInfo [c icon text]
    (box :class c :orientation "horizontal" :space-evenly "false" :halign "center" :spacing "5"
        (box :class "icon" icon ) text
    ))

(defwidget middle []
    (displayInfo :c "island windowname" :icon "" :text "${windowName}"))

(defwidget time []
    (displayInfo :c "time" :icon "" :text "${time}"))

(defwidget cpu []
    (displayInfo :c "cpu" :icon "" :text "${round(EWW_CPU.avg,0)}%"))

(defwidget temp []
    (displayInfo :c "temp" :icon "" :text "${cputemp}"))

(defwidget sound []
    (eventbox :onhover "${EWW_CMD} update soundReveal=true" :onhoverlost "${EWW_CMD} update soundReveal=false"
              (box :class "sound" :orientation "horizontal" :space-evenly "false" :spacing "5" (box :class "icon" soundIcon)
                   (revealer :transition "slideleft" :duration "350ms" :reveal soundReveal
                             (scale :width "100"
                                    :min "0"
                                    :max "100" 
                                    :value sound 
                                    :orientation "h" 
                                    :timeout "500ms"
                                    :onchange "~/.bin/changeVolume.sh {}%")) " ${sound}% " )))
(defwidget rightside []
    (box :class "island" :orientation "horizontal" :space-evenly "false" :halign "end" :spacing "15" (time) (cpu) (temp) (sound))) ; time cpu percentage battery sound

(defwindow bar
    	   :monitor 0
	   :geometry (geometry :x "0%"
			       :y "0"
			       :width "99%"
			       :height "20" 
			       :anchor "top center")
	   :stacking "fg"
	   :reserve (struts :distance "40px" :side "top")
	   :windowtype "dock"
           :wm-ignore false
          (box :orientation "horizontal"
               (leftside)
               (middle)
               (rightside)
               ))

(defwidget app [command icon]
    (button :class "app"
            :onclick command
            :timeout "500ms"
            (box 
                (image :path icon))))

(defwidget apps []
    (box :orientation "v"
         :spacing 50
        (box :orientation "h"
             :spacing 50
            (app :command "firefox&" :icon "${EWW_CONFIG_DIR}/icons/firefox.png")
            (app :command "steam&" :icon "${EWW_CONFIG_DIR}/icons/steam-icon.png")
            (app :command "kitty&" :icon "${EWW_CONFIG_DIR}/icons/xterm-color.png"))
        (box :orientation "h"
             :spacing 50
            (app :command "nitrogen&" :icon "${EWW_CONFIG_DIR}/icons/image-viewer.png")
            (app :command "nixos-help&" :icon "${EWW_CONFIG_DIR}/icons/khelpcenter.png")
            (app :command "rofi -theme launcher -modi drun -show drun -show-icons&" :icon "${EWW_CONFIG_DIR}/icons/ulauncher.png"))
        (box :orientation "h"
             :spacing 50
            (app :command "lxappearance&" :icon "${EWW_CONFIG_DIR}/icons/gnome-settings.png"))))

(defvar todolist "\"empty\"")

(defwidget todo [] 
    (box :orientation "v" 
         :space-evenly false
         :spacing 10
         (box :class "block" (input :timeout "1s" :onaccept "todohs add \"{}\"; ${EWW_CMD} update todolist=\"`todohs generateEww todolist \\\"${EWW_CMD}\\\" 10`\""))
         (box :class "block" (literal  :content todolist))))

(defwidget weather []
    (box :orientation "h"
         :class "block"
         (image :path weatherImage
                :image-height 150)
         (box :orientation "v"
              :spacing 15
            "${weather}"
            "temp: ${temp}°F"
            "wind: ${windSpeed}"
            "gusts: ${windGusts}"
          )
     )
)

(defwidget rightCol []
    (box :orientation "v"
         :width 575
         :spacing 50
         :space-evenly false
         :valign "center"
         (apps)
         (todo)
        ))

(defvar result "")

(defwidget calc []
    (box :class "block" :orientation "v" 
        (input :timeout "10s" :onaccept "${EWW_CMD} update result=`echo \"scale=20;\" '{}' | bc`")
        result))

(defwidget leftCol []
    (box :orientation "v"
         :width 575
         :space-evenly false
         :spacing 50
         :valign "center"
         (box :class "block" (calendar  :class "cal" :active false :show-heading false))
         (calc)
         (weather)
        ))

(defwidget profile []
    (box 
        :class "block photo"
        :height 575
        (image :path "${EWW_CONFIG_DIR}/icons/photo.png")
        ))
    

(defwidget sysInfo []
    (box 
        :height 575
        :class "block"
        :orientation "v"
        :space-evenly false
        :spacing 20
        (box :orientation "h" :height 180 (circular-progress :class "color1" :thickness 20 :value {EWW_RAM.used_mem_perc} "") (circular-progress :class "color2" :thickness 20 :value {EWW_DISK["/"].used_perc} "" ))
        (box :orientation "h" :height 180 (circular-progress :class "color3" :thickness 20 :value sound "蓼") (circular-progress :class "color4" :thickness 20 :value {round(EWW_CPU.avg,0)} ""))
        (box :class "network" :orientation "h" (box :class "upload" " ${EWW_NET.wlp5s0.NET_UP} kbs") (box :class "download" " ${EWW_NET.wlp5s0.NET_DOWN} kbs"))
        ))

(defwidget middleCol []
    (box :orientation "v"
         :spacing 50
         :width 575
         :space-evenly false
        (profile)
        (box :spacing 0 :space-evenly false :class "app" :orientation "v" :height 20 "The function of good software is to make the complex appear to be simple." "- Grady Booch" )
        (sysInfo)
        ))

(defwindow dash
    :monitor 0
    :windowtype "dialog"
    :wm-ignore false
    :stacking "fg"
    :geometry (geometry :x "0"
                        :y "0"
                        :width "100%"
                        :height "100%"
                        :anchor "center")
    (box :orientation "h"
         :spacing 40
         :valign "center"
         :halign "center"
        (leftCol)
        (middleCol)
        (rightCol)
        )
   )
